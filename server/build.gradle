plugins {
    id 'java'
}

group 'org.beifengtz.etcd'
version '1.1.4'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenLocal()
//    maven {
//        url "https://maven.aliyun.com/repository/public"
//    }
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    compile('io.etcd:jetcd-core:0.6.1') {
        exclude group: 'io.netty'
        exclude group: 'com.google.code.gson'
        exclude group: 'org.slf4j'
    }
    compile 'io.github.tzfun.jvmm:jvmm-convey:2.4.2'
    compile 'io.github.tzfun.jvmm:jvmm-logger:2.4.2'
    compileOnly "org.projectlombok:lombok:1.18.12"
    annotationProcessor "org.projectlombok:lombok:1.18.12"
    compile 'com.jcraft:jsch:0.1.55'
}

test {
    useJUnitPlatform()
}

task writeVersionFile() {
    File targetFile = new File("src/main/resources/workbench-version.txt")
    if (targetFile.exists()) {
        def out = new ByteArrayOutputStream()
        def cmd = 'git rev-parse --short HEAD'
        def isWindows = System.getProperty('os.name').toLowerCase(Locale.ROOT).contains("windows")

        exec {
            ExecSpec execSpec ->
                executable(isWindows ? 'cmd' : 'sh')
                args isWindows ? '/c' : '-c', cmd
                standardOutput = out
        }
        targetFile.write((version as String) + "\n" + out.toString())
    }
}

compileJava {
    dependsOn writeVersionFile
    options.compilerArgs << "-parameters" << "-Xlint:unchecked" << "-Xlint:deprecation"
}

task copyJar(type: Copy) {
    delete "$buildDir/libs/*"
    from configurations.compile
    into "$buildDir/libs"
}

jar {
    manifestContentCharset 'utf-8'
    metadataCharset 'utf-8'
    archiveName("etcd-workbench-${version}.jar")

    manifest {
        attributes(
                "Manifest-Version": 1.0,
                'Main-Class': 'org.beifengtz.etcd.server.EtcdServer'
        )
    }

    //  如果传入了 skipMerge 参数，就不将依赖的jar包进行合并
    if (project.hasProperty("skipMerge")) {
        dependsOn copyJar
    } else {
        from {
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
    }
}
